[tool.poetry]
name = "python-gists"
version = "1.0.0"
description = "üêçüì¶ this Python package provides a very convenient way to import GitHub gists in a pythonic way using `import` statements. "
authors = ["Farthofer Laurenz <laurenz@hey.com>"]
repository = "https://github.com/LaurenzBeck/gists.git"
readme = "README.md"
keywords = ["Python", "GitHub", "gists", "import", "deployment", "üêç", "üì¶"]
packages = [{ include = "gists", from = "src" }]
license = "MIT"

[tool.poetry.dependencies]
python = "^3.11"
loguru = "^0.7.2"
gist-import = "^1.0.4"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
ruff = "^0.4.8"
poethepoet = "^0.26.1"
pre-commit = "^3.7.1"
ipython = "^8.25.0"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint]
select = ["ALL"]  # Refer to https://docs.astral.sh/ruff/rules/ and click on the specific rule to understand why it is important

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 20

[tool.mypy]
check_untyped_defs = true
ignore_missing_imports = true

[tool.docformatter]
recursive = true
wrap-summaries = 0
wrap-descriptions = 0

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
